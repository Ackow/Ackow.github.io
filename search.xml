<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round 943(Div.3)</title>
    <url>/2024/05/04/Codeforces-Round-943(Div.3)/</url>
    <content><![CDATA[<h1 id="Codeforces-Round-943-Div-3-A-B"><a href="#Codeforces-Round-943-Div-3-A-B" class="headerlink" title="Codeforces Round 943(Div.3) A~B"></a><a href="https://codeforces.com/contest/1968">Codeforces Round 943(Div.3) A~B</a></h1><h2 id="A-Maximize"><a href="#A-Maximize" class="headerlink" title="A.Maximize?"></a>A.Maximize?</h2><p>总共 $t$ 组测试数据，每组测试数据给定一个 $x$ ，已知 $y \in[1,x)$ ，求出最大的 $gcd(x,y)+y$ 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:<span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;x;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;=<span class="built_in">gcd</span>(x,i)+i)&#123;</span><br><span class="line">                ans=<span class="built_in">gcd</span>(x,i)+i;</span><br><span class="line">                y=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Prefiquence"><a href="#B-Prefiquence" class="headerlink" title="B.Prefiquence"></a>B.Prefiquence</h2><p>总共 $t$ 组测试数据，每组测试数据给定 $n$ 和 $m$ ，和长度分别为 $n$ 和 $m$ 的 两个字符串 $a$ 和 $b$ ，$a$ 可以由 $b$ 删除几个元素得到，求字符串 $𝑎$ 的前缀是字符串 $𝑏$​ 的子序列的最大值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n,m;</span><br><span class="line">        string a,b;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            p=b.<span class="built_in">find</span>(a[i],p);</span><br><span class="line">            <span class="keyword">if</span>(p&lt;m &amp;&amp; p&gt;=<span class="number">0</span> &amp;&amp; i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">                p+=<span class="number">1</span>;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p&lt;m &amp;&amp; p&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            p+=<span class="number">1</span>;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Cloudflare搭建自己的博客</title>
    <url>/2024/05/05/HexoAndCloudFlare/</url>
    <content><![CDATA[<h1 id="使用Hexo-Cloudflare搭建自己的博客"><a href="#使用Hexo-Cloudflare搭建自己的博客" class="headerlink" title="使用Hexo+Cloudflare搭建自己的博客"></a>使用Hexo+Cloudflare搭建自己的博客</h1><h2 id="一、Hexo准备"><a href="#一、Hexo准备" class="headerlink" title="一、Hexo准备"></a>一、Hexo准备</h2><h3 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装<a href="https://nodejs.org/en">Node.js</a></h3><p>进入官网，下载LTS长期支持版本。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/1.png" alt="Node.js下载"></p>
<p>安装完可以用下列命令判断是否安装成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出内容v20.12.2</span></span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出内容10.5.0</span></span><br></pre></td></tr></table></figure>

<h3 id="2、更换源"><a href="#2、更换源" class="headerlink" title="2、更换源"></a>2、更换源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set strict-ssl false	#关闭ssl验证</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org	#安装cnpm</span><br></pre></td></tr></table></figure>

<h3 id="3、安装hexo框架"><a href="#3、安装hexo框架" class="headerlink" title="3、安装hexo框架"></a>3、安装hexo框架</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo -v	验证是否安装成功</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/2024/05/04/HexoAndCloudFlare/2.png" alt="hexo框架安装"></p>
<h3 id="4、构建hexo"><a href="#4、构建hexo" class="headerlink" title="4、构建hexo"></a>4、构建hexo</h3><p>在自己想要存放文件的位置建一个文件夹,然后进入到新建的博客文件夹。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init #初始化默认文件</span><br><span class="line"></span><br><span class="line">hexo -s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在localhost:4000就可以看到我们的博客内容了</span></span><br><span class="line"></span><br><span class="line">hexo new post &quot;MyFirstBlog&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在<span class="built_in">source</span>/_post 文件夹下就生成了这一篇博客</span></span><br><span class="line"></span><br><span class="line">hexo -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建文件</span></span><br></pre></td></tr></table></figure>

<p>更多信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p><strong>布局(Layout)</strong></p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>source&#x2F;_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source&#x2F;_drafts</td>
</tr>
</tbody></table>
<h2 id="二、GitHUb"><a href="#二、GitHUb" class="headerlink" title="二、GitHUb"></a>二、GitHUb</h2><h3 id="1、仓库创建"><a href="#1、仓库创建" class="headerlink" title="1、仓库创建"></a>1、仓库创建</h3><p>在<code>Github</code>上创建一个仓库，使用<code>[Your Name].github.io</code>进行仓库命名。</p>
<h3 id="2、hexo安装包"><a href="#2、hexo安装包" class="headerlink" title="2、hexo安装包"></a>2、hexo安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="3、修改-config-yml"><a href="#3、修改-config-yml" class="headerlink" title="3、修改_config.yml"></a>3、修改_config.yml</h3><p>打开根目录下的_config.yml。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  		<span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> 		<span class="attr">repo:</span> <span class="string">https://[YourToken]@github.com/[YourGitHubName]/[YourGitHubName].github.io.git</span></span><br><span class="line">  		<span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p><code>[YourToken]</code> ：GitHub上的Personal access tokens。</p>
<p><code>[YourGitHubName]</code> ：GitHub用户名</p>
<h3 id="4、部署"><a href="#4、部署" class="headerlink" title="4、部署"></a>4、部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署完成之后就可以通过<code>YourGitHubName</code>.github.io访问博客了</p>
<h2 id="三、CloudFlare"><a href="#三、CloudFlare" class="headerlink" title="三、CloudFlare"></a>三、CloudFlare</h2><h3 id="1、注册CloudFlare"><a href="#1、注册CloudFlare" class="headerlink" title="1、注册CloudFlare"></a>1、注册CloudFlare</h3><p>注册完成之后，点击左侧的<code>Workers 和 Pages</code>。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/6.png" alt="CLoudFlare"></p>
<p>点击<code>创建应用程序</code>-&gt;<code>Pages</code>-&gt;<code>连接到Git</code>。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/7.png" alt="连接到Git"></p>
<p>根据下图设置构建设置。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/8.png" alt="构建设置"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo; hexo clean; hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="2、域名"><a href="#2、域名" class="headerlink" title="2、域名"></a>2、域名</h3><p>首先我们需要购买一个自己的域名，我这里以阿里云为例。</p>
<p>购买域名之后进入<code>域名控制台</code>。</p>
<p>点击<code>列表</code>-&gt;<code>管理</code>。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/4.png" alt="域名控制台"></p>
<p>点击<code>DNS修改</code>-&gt;<code>修改DNS服务器</code>。</p>
<p><img src="/img/2024/05/04/HexoAndCloudFlare/5.png" alt="DNS修改"></p>
<p>在CloudFlare中点击<code>网站</code>-&gt;<code>添加站点</code>，填写信息，然后将这里给出的两个DNS地址填入域名控制台里，然后等待十分钟左右。</p>
<p>在Workers 和 Pages中给项目添加自定义域，即可实现域名更改了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity使用JSON存储实现背包功能</title>
    <url>/2023/11/13/UnityJsonInventory/</url>
    <content><![CDATA[<h1 id="Unity使用JSON存储实现背包功能"><a href="#Unity使用JSON存储实现背包功能" class="headerlink" title="Unity使用JSON存储实现背包功能"></a>Unity使用JSON存储实现背包功能</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Unity有五种常用的存储数据的方法，可以用来存储我们游戏的数据。</p>
<h3 id="一、PlayerPrefs"><a href="#一、PlayerPrefs" class="headerlink" title="一、PlayerPrefs"></a>一、PlayerPrefs</h3><p>这是Unity自带的一种用于本地持久化保存与读取的一个类,采用以键值对的形式将数据保存在文件中。</p>
<p><img src="/img/2024/05/03/UnityJsonInventory/1.png" alt="PlayerPrefs"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> IntValue;</span><br><span class="line"><span class="built_in">float</span> FloatValue;</span><br><span class="line">String StringValue;</span><br><span class="line">PlayerPrefs.SetFloat(<span class="string">&quot;FloatKey&quot;</span>,FloatValue);	<span class="comment">//存储float类型的值，对应的键为FloatKey</span></span><br><span class="line">PlayerPrefs.SetInt(<span class="string">&quot;IntKey&quot;</span>,IntValue);	<span class="comment">//存储int类型的值，对应的键为IntKey</span></span><br><span class="line">PlayerPrefs.SetString(<span class="string">&quot;StringKey&quot;</span>,StringValue);	<span class="comment"><span class="doctag">///</span>/存储string类型的值，对应的键为StringKey</span></span><br></pre></td></tr></table></figure>

<h3 id="二、读取普通文本-TextAsset"><a href="#二、读取普通文本-TextAsset" class="headerlink" title="二、读取普通文本:TextAsset"></a>二、读取普通文本:TextAsset</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">TextAsset text=(TextAsset)Resources.Load(<span class="string">&quot;Text&quot;</span>);</span><br><span class="line">Debug.Log(text.text);</span><br></pre></td></tr></table></figure>

<p>在Project窗口的根目录创建<strong>Resources</strong>文件夹，然后把名字为Text.txt的文件夹的文件放在Resources文件夹下就可以读取到。</p>
<h3 id="三、JSON"><a href="#三、JSON" class="headerlink" title="三、JSON"></a>三、JSON</h3><p>本篇使用的方法，后续详细讲解。</p>
<h3 id="四、XML储存"><a href="#四、XML储存" class="headerlink" title="四、XML储存"></a>四、XML储存</h3><p>本篇不讲解。</p>
<h3 id="五、Splite"><a href="#五、Splite" class="headerlink" title="五、Splite"></a>五、Splite</h3><p>本篇不讲解。</p>
<h2 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h2><h3 id="一、背包UI界面创建"><a href="#一、背包UI界面创建" class="headerlink" title="一、背包UI界面创建"></a>一、背包UI界面创建</h3><p>本教程使用的UI资源来自Unity Assets Store中的免费资源<a href="https://assetstore.unity.com/packages/2d/gui/simple-fantasy-gui-99451">SIMPLE FANTASY GUI</a>和<a href="https://assetstore.unity.com/packages/2d/gui/fantasy-wooden-gui-free-103811">Fantasy Wooden GUI : Free</a>。</p>
<h4 id="1、创建Canvas画布"><a href="#1、创建Canvas画布" class="headerlink" title="1、创建Canvas画布"></a>1、创建Canvas画布</h4><p>创建一个Canvas（UI画布），然后在Canvas下创建一个Image,命名为Bag，放入图片，作为背包背景，将其缩放到合适大小，放置到合适位置。</p>
<p>在创建一个DragCanvas，并将<strong>sort order</strong>值设置为1，使其内的UI始终高于Canvas的UI显示，后面需要用到。</p>
<p><img src="/img/2024/05/03/UnityJsonInventory/2.png" alt="Bag"></p>
<h4 id="2、添加组件"><a href="#2、添加组件" class="headerlink" title="2、添加组件"></a>2、添加组件</h4><p>然后添加<strong>Grid Layout Group</strong>组件，用来控制其子物体的排序格式。</p>
<p><img src="/img/2024/05/03/UnityJsonInventory/3.png" alt="Grid"></p>
<p><strong>CellSize</strong>：每个子物体的大小。</p>
<p><strong>Spacing</strong>：每个子物体之间的间隔。</p>
<p><strong>Start Corner</strong>：子物体的起始角落。</p>
<p><strong>Start Axis</strong>：子物体起始轴线。</p>
<h4 id="3、创建物品格"><a href="#3、创建物品格" class="headerlink" title="3、创建物品格"></a>3、创建物品格</h4><p>在Bag下创建一个Image，命名为Slot，如上添加图片，然后复制，达到想要的背包效果。</p>
<p><img src="/img/2024/05/03/UnityJsonInventory/4.png" alt="Slot"></p>
<h4 id="4、创建Item"><a href="#4、创建Item" class="headerlink" title="4、创建Item"></a>4、创建Item</h4><p>在Slot下创建一个Image，命名为Item，用来显示物品的图片，然后在Item下创建一个Text，用来显示物品的数字。将Item制作为预设体，方便后期使用。</p>
<h4 id="5、最终层级关系"><a href="#5、最终层级关系" class="headerlink" title="5、最终层级关系"></a>5、最终层级关系</h4><p><img src="/img/2024/05/03/UnityJsonInventory/5.png" alt="层级关系"></p>
<h3 id="二、脚本编写"><a href="#二、脚本编写" class="headerlink" title="二、脚本编写"></a>二、脚本编写</h3><h4 id="1、Inventory脚本"><a href="#1、Inventory脚本" class="headerlink" title="1、Inventory脚本"></a>1、Inventory脚本</h4><p>首先定义一个物品类，用来存放每个物品信息。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InventoryInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Parent;		<span class="comment">//物品属于哪一个物品格</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;			</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Num;</span><br><span class="line">    <span class="keyword">public</span> Sprite icon;			<span class="comment">//物品图标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Type				<span class="comment">//用于区分类别，本教程中未使用</span></span><br><span class="line">    &#123;</span><br><span class="line">        Weapon,</span><br><span class="line">        Food</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Type myType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在定义一个类来存储物品信息。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvenInfoList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;InventoryInfo&gt; inventoryInfo = <span class="keyword">new</span> List&lt;InventoryInfo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义脚本所需要的变量。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Inventory instance;	<span class="comment">//	将该脚本定义为静态变量。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> filePath = Application.streamingAssetsPath +<span class="string">&quot;/GameData/saveData.json&quot;</span>;<span class="comment">//存储位置</span></span><br><span class="line"><span class="keyword">private</span> InvenInfoList list = <span class="keyword">new</span> InvenInfoList();</span><br><span class="line"><span class="keyword">public</span> GameObject itemPrefab;	<span class="comment">//获取Item预设体，用于后面生成。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> GameObject dragCanvas;	<span class="comment">//拖拽画布</span></span><br></pre></td></tr></table></figure>

<p>我们需要引入命名空间<code>using System.IO</code>，让我们能往计算机硬盘中写入数据。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br></pre></td></tr></table></figure>

<p>接下来需要就需要用到Unity关于Json文件数据的存储。</p>
<h5 id="JsonUtility支持的数据类型。"><a href="#JsonUtility支持的数据类型。" class="headerlink" title="JsonUtility支持的数据类型。"></a>JsonUtility支持的数据类型。</h5><p>·支持数字数据类型：int、float、double、decimal、long,包括 uint、float2x4、double2 等数据类型</p>
<p>·支持字符数据类型：char、string</p>
<p>·【特别】支持 Vector 数据类型,包括 Vetor2、Vector3、Vector2x2 等数据类型</p>
<p>·【特别】支持 Quateration 四元数数据类型</p>
<p>·【特别】支持 public 访问类型的类、字段</p>
<p>·【特别】支持 SerializeField 特性指引的类、字段</p>
<p>·<code>JsonUtility.toJson(object target, bool prettyPrint)</code></p>
<p>​	<code>object</code>:对象转化为Json文本。</p>
<p>​	<code>prettyPrint</code>：决定最终的 Json 数据文本是否是一个格式化后的数据文本，即是否使用 Json 文本的 Format 化。</p>
<p>·<code>FromJson(string text)</code></p>
<p>​	1、将 Json 数据文本转存至类中 <strong>public</strong> 或 附有 <strong>SerializeField</strong> 特性的字段上赋值。</p>
<p>​	2、使用时无需管理值具体分配。其将基于字段命名自行匹配并赋值。</p>
<p>·<code>FromJsonOverwrite(string text, object objectToOverwrite)</code></p>
<p>编写<code>CreateSave</code>函数，用于数据存储。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateSave</span>()		<span class="comment">//向list中添加需要序列化存储的数据信息</span></span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; transform.childCount; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          InventoryInfo a = <span class="keyword">new</span> InventoryInfo();</span><br><span class="line">          GameObject slot = transform.GetChild(i).gameObject;		<span class="comment">//获取物品的父物体即物品格信息</span></span><br><span class="line">        	</span><br><span class="line">          <span class="keyword">if</span> (slot.transform.childCount != <span class="number">0</span>)		<span class="comment">//存储物品信息</span></span><br><span class="line">          &#123;</span><br><span class="line">              Item tmp =slot.transform.GetChild(<span class="number">0</span>).GetComponent&lt;Item&gt;();</span><br><span class="line">              a.Parent = slot.name;</span><br><span class="line">              a.Name = tmp.Info.Name;</span><br><span class="line">              a.Num = tmp.Info.Num;</span><br><span class="line">              a.icon = tmp.Info.icon;</span><br><span class="line">              a.myType = tmp.Info.myType;</span><br><span class="line"></span><br><span class="line">              list.inventoryInfo.Add(a);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>接下来编写<code>SaveByJson</code>函数，用于向硬盘内写入数据。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveByJson</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list.inventoryInfo.Clear();		<span class="comment">//清空list内的内容</span></span><br><span class="line"></span><br><span class="line">    CreateSave();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> json = JsonUtility.ToJson(list,<span class="literal">true</span>);		<span class="comment">//转化为Json文本</span></span><br><span class="line"></span><br><span class="line">    StreamWriter sw = <span class="keyword">new</span> StreamWriter(filePath);		<span class="comment">//写入硬盘</span></span><br><span class="line">    sw.Write(json);</span><br><span class="line">    sw.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存储数据的内容就写完了，接下来需要编写读取Json数据的函数。编写<code>LoadByJson</code>函数，并且在<code>Awake</code>函数中调用它。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadByJson</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> json;</span><br><span class="line"></span><br><span class="line">    StreamReader sr = <span class="keyword">new</span> StreamReader(filePath);		<span class="comment">//获取硬盘中的Json</span></span><br><span class="line">    json = sr.ReadToEnd();</span><br><span class="line">    sr.Close();</span><br><span class="line"></span><br><span class="line">     list = JsonUtility.FromJson&lt;InvenInfoList&gt;(json);	<span class="comment">//将其重新写入list中</span></span><br><span class="line"></span><br><span class="line">    SetGame();		<span class="comment">//设置游戏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetGame</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.inventoryInfo.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        InventoryInfo a = <span class="keyword">new</span> InventoryInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; transform.childCount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject slot = transform.GetChild(j).gameObject;</span><br><span class="line">            <span class="comment">//读取到当前物品格信息，写入</span></span><br><span class="line">            <span class="keyword">if</span> (slot.name == list.inventoryInfo[i].Parent)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject it = Instantiate(itemPrefab, slot.transform, <span class="literal">true</span>);</span><br><span class="line">                Item tmp =it.GetComponent&lt;Item&gt;();</span><br><span class="line">              	</span><br><span class="line">                RectTransform rt = it.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">                rt.offsetMax = <span class="keyword">new</span> Vector2(<span class="number">-5f</span>, <span class="number">-5f</span>);</span><br><span class="line">                rt.offsetMin = <span class="keyword">new</span> Vector2(<span class="number">5f</span>, <span class="number">5f</span>);</span><br><span class="line"></span><br><span class="line">                tmp.Info.Name = list.inventoryInfo[i].Name;</span><br><span class="line">                tmp.Info.Num = list.inventoryInfo[i].Num;</span><br><span class="line">                tmp.Info.icon = list.inventoryInfo[i].icon;</span><br><span class="line"></span><br><span class="line">                Image icon = tmp.GetComponent&lt;Image&gt;();</span><br><span class="line">                icon.sprite = tmp.Info.icon;</span><br><span class="line"></span><br><span class="line">                tmp.Info.myType = list.inventoryInfo[i].myType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、Item脚本"><a href="#2、Item脚本" class="headerlink" title="2、Item脚本"></a>2、Item脚本</h4><p>用于物品信息实时更新。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> InventoryInfo Info;</span><br><span class="line">    <span class="keyword">private</span> TMP_Text a;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = transform.GetChild(<span class="number">0</span>).GetComponent&lt;TMP_Text&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        a.text = Info.Num.ToString(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、DragItem脚本"><a href="#3、DragItem脚本" class="headerlink" title="3、DragItem脚本"></a>3、DragItem脚本</h4><p>首先要实现拖移UI功能，需要先引入三个接口,<code>IBeginDragHandler,IDragHandler,IEndDragHandler</code>。</p>
<p>然后先创建3个函数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)	<span class="comment">//开始拖拽</span></span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)	<span class="comment">//正在拖拽</span></span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)	<span class="comment">//结束拖拽</span></span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要实现物品拖移，首先我们需要记录下物品原始的位置，用于拖拽到非法位置之后可以回归到原来的位置，然后需要区分左右键，<strong>左键代表正常拖移，右键代表平分物体拖移</strong>。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform originalParent;    <span class="comment">//初始位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//记录初始位置</span></span><br><span class="line">    originalParent = transform.parent;</span><br><span class="line">    Item iItem = gameObject.GetComponent&lt;Item&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (Average.instance.isLeft || iItem.Info.Num==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将拖动的物品放到DragCanvas下</span></span><br><span class="line">        transform.SetParent(Inventory.instance.dragCanvas.transform,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//右键平分物品</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject a = Instantiate(gameObject, transform.parent, <span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> num = iItem.Info.Num / <span class="number">2</span>;</span><br><span class="line">        iItem.Info.Num -= num;</span><br><span class="line">        Item aItem = a.GetComponent&lt;Item&gt;();</span><br><span class="line">        aItem.Info.Num = num; </span><br><span class="line"></span><br><span class="line">        transform.SetParent(Inventory.instance.dragCanvas.transform,<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正在拖移至需要实时更新物品位置即可。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//跟随鼠标移动</span></span><br><span class="line">    transform.position = eventData.position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>左后结束拖移需要判断物品当前位置是否合法。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//放下物品 交换数据</span></span><br><span class="line">    <span class="keyword">if</span> (EventSystem.current.IsPointerOverGameObject())<span class="comment">//是否指向UI组件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Inventory.instance.CheckInInventoryUI(eventData.position))</span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 a = eventData.pointerEnter.transform.position;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//寻找最近的物品格</span></span><br><span class="line">            GameObject item = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">double</span> minDistance=<span class="number">1000000000f</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Inventory.instance.transform.childCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 b = Inventory.instance.transform.GetChild(i).transform.position;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">double</span> dis = Vector2.Distance(a, b);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (dis &lt; minDistance)</span><br><span class="line">                &#123;</span><br><span class="line">                    minDistance = dis;</span><br><span class="line">                    item = Inventory.instance.transform.GetChild(i).gameObject;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//物品交换</span></span><br><span class="line">                <span class="keyword">if</span> (Swap(item))</span><br><span class="line">                &#123;</span><br><span class="line">                    Item it1 = item.transform.GetChild(<span class="number">0</span>).GetComponent&lt;Item&gt;();</span><br><span class="line">                    Item it2 = transform.GetComponent&lt;Item&gt;();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//合并同类物品</span></span><br><span class="line">                    <span class="keyword">if</span> (it1.Info.Name == it2.Info.Name)</span><br><span class="line">                    &#123;</span><br><span class="line">                        it1.Info.Num += it2.Info.Num;</span><br><span class="line">                        Destroy(gameObject);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        item.transform.GetChild(<span class="number">0</span>).SetParent(originalParent,<span class="literal">true</span>);</span><br><span class="line">                        transform.SetParent(item.transform, <span class="literal">true</span>);</span><br><span class="line">                        SetRectTransform(gameObject);</span><br><span class="line">                        SetRectTransform(originalParent.GetChild(<span class="number">0</span>).gameObject);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//空物品格</span></span><br><span class="line">                    transform.SetParent(item.transform, <span class="literal">true</span>);</span><br><span class="line">                    SetRectTransform(gameObject);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是物品格，返回原位</span></span><br><span class="line">            transform.SetParent(originalParent,<span class="literal">true</span>);</span><br><span class="line">            SetRectTransform(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这边需要在Inventory脚本中添加一个<code>CheckInInventoryUI</code>函数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CheckInInventoryUI</span>(<span class="params">Vector3 position</span>)<span class="comment">//此处这个位置是要传输进来的位置</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; transform.childCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RectTransform t = transform.GetChild(i).transform <span class="keyword">as</span> RectTransform;<span class="comment">//强制类型转换</span></span><br><span class="line">        <span class="keyword">if</span> (RectTransformUtility.RectangleContainsScreenPoint(t, position))<span class="comment">//判断当前位置是否物品栏里</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后编写<code>swap</code>函数和<code>SetRectTransform</code>函数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Swap</span>(<span class="params">GameObject tmp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tmp.transform.childCount == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetRectTransform</span>(<span class="params">GameObject tmp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RectTransform rt = tmp.transform.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">    rt.offsetMax = <span class="keyword">new</span> Vector2(<span class="number">-5f</span>, <span class="number">-5f</span>);</span><br><span class="line">    rt.offsetMin = <span class="keyword">new</span> Vector2(<span class="number">5f</span>, <span class="number">5f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、Average脚本"><a href="#4、Average脚本" class="headerlink" title="4、Average脚本"></a>4、Average脚本</h4><p>最后是在DragItem中用到的Average脚本。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Average instance;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isLeft;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    instance = gameObject.GetComponent&lt;Average&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Mouse0))</span><br><span class="line">    &#123;</span><br><span class="line">        isLeft = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Mouse1))</span><br><span class="line">    &#123;</span><br><span class="line">        isLeft = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/img/2024/05/03/UnityJsonInventory/6.gif" alt="在这里插入图片描述"></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>Inventory</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Serialization;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InventoryInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Parent;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Num;</span><br><span class="line">    <span class="keyword">public</span> Sprite icon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Type</span><br><span class="line">    &#123;</span><br><span class="line">        Weapon,</span><br><span class="line">        Food</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Type myType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvenInfoList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;InventoryInfo&gt; inventoryInfo = <span class="keyword">new</span> List&lt;InventoryInfo&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Inventory</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inventory instance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> filePath = Application.streamingAssetsPath +<span class="string">&quot;/GameData/saveData.json&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> InvenInfoList list = <span class="keyword">new</span> InvenInfoList();</span><br><span class="line">    <span class="keyword">public</span> GameObject itemPrefab;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> GameObject dragCanvas;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        dragCanvas = GameObject.Find(<span class="string">&quot;DragCanvas&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        instance = GetComponent&lt;Inventory&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果存在存档，读取</span></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(filePath))</span><br><span class="line">        &#123;</span><br><span class="line">            LoadByJson();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.M))</span><br><span class="line">        &#123;</span><br><span class="line">            SaveByJson();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateSave</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; transform.childCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            InventoryInfo a = <span class="keyword">new</span> InventoryInfo();</span><br><span class="line">            GameObject slot = transform.GetChild(i).gameObject;</span><br><span class="line">            <span class="keyword">if</span> (slot.transform.childCount != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Item tmp =slot.transform.GetChild(<span class="number">0</span>).GetComponent&lt;Item&gt;();</span><br><span class="line">                a.Parent = slot.name;</span><br><span class="line">                a.Name = tmp.Info.Name;</span><br><span class="line">                a.Num = tmp.Info.Num;</span><br><span class="line">                a.icon = tmp.Info.icon;</span><br><span class="line">                a.myType = tmp.Info.myType;</span><br><span class="line"></span><br><span class="line">                list.inventoryInfo.Add(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveByJson</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        list.inventoryInfo.Clear();</span><br><span class="line">        </span><br><span class="line">        CreateSave();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> json = JsonUtility.ToJson(list,<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        StreamWriter sw = <span class="keyword">new</span> StreamWriter(filePath);</span><br><span class="line">        sw.Write(json);</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadByJson</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> json;</span><br><span class="line"></span><br><span class="line">        StreamReader sr = <span class="keyword">new</span> StreamReader(filePath);</span><br><span class="line">        json = sr.ReadToEnd();</span><br><span class="line">        sr.Close();</span><br><span class="line"></span><br><span class="line">         list = JsonUtility.FromJson&lt;InvenInfoList&gt;(json);</span><br><span class="line"></span><br><span class="line">        SetGame();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetGame</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.inventoryInfo.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            InventoryInfo a = <span class="keyword">new</span> InventoryInfo();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; transform.childCount; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject slot = transform.GetChild(j).gameObject;</span><br><span class="line">                <span class="comment">//读取到当前物品格信息，写入</span></span><br><span class="line">                <span class="keyword">if</span> (slot.name == list.inventoryInfo[i].Parent)</span><br><span class="line">                &#123;</span><br><span class="line">                    GameObject it = Instantiate(itemPrefab, slot.transform, <span class="literal">true</span>);</span><br><span class="line">                    Item tmp =it.GetComponent&lt;Item&gt;();</span><br><span class="line">                    RectTransform rt = it.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">                    rt.offsetMax = <span class="keyword">new</span> Vector2(<span class="number">-5f</span>, <span class="number">-5f</span>);</span><br><span class="line">                    rt.offsetMin = <span class="keyword">new</span> Vector2(<span class="number">5f</span>, <span class="number">5f</span>);</span><br><span class="line">                </span><br><span class="line">                    tmp.Info.Name = list.inventoryInfo[i].Name;</span><br><span class="line">                    tmp.Info.Num = list.inventoryInfo[i].Num;</span><br><span class="line">                    tmp.Info.icon = list.inventoryInfo[i].icon;</span><br><span class="line"></span><br><span class="line">                    Image icon = tmp.GetComponent&lt;Image&gt;();</span><br><span class="line">                    icon.sprite = tmp.Info.icon;</span><br><span class="line"></span><br><span class="line">                    tmp.Info.myType = list.inventoryInfo[i].myType;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CheckInInventoryUI</span>(<span class="params">Vector3 position</span>)<span class="comment">//此处这个位置是要传输进来的位置</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; transform.childCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            RectTransform t = transform.GetChild(i).transform <span class="keyword">as</span> RectTransform;<span class="comment">//强制类型转换</span></span><br><span class="line">            <span class="keyword">if</span> (RectTransformUtility.RectangleContainsScreenPoint(t, position))<span class="comment">//判断当前位置是否物品栏里</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Item</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> TMPro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> InventoryInfo Info;</span><br><span class="line">    <span class="keyword">private</span> TMP_Text a;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = transform.GetChild(<span class="number">0</span>).GetComponent&lt;TMP_Text&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        a.text = Info.Num.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DragItem</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DragItem</span> : <span class="title">MonoBehaviour</span>,<span class="title">IBeginDragHandler</span>,<span class="title">IDragHandler</span>,<span class="title">IEndDragHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform originalParent;    <span class="comment">//初始位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//记录初始位置</span></span><br><span class="line">        originalParent = transform.parent;</span><br><span class="line">        Item iItem = gameObject.GetComponent&lt;Item&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Average.instance.isLeft || iItem.Info.Num==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将拖动的物品放到DragCanvas下</span></span><br><span class="line">            transform.SetParent(Inventory.instance.dragCanvas.transform,<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//右键平分物品</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameObject a = Instantiate(gameObject, transform.parent, <span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span> num = iItem.Info.Num / <span class="number">2</span>;</span><br><span class="line">            iItem.Info.Num -= num;</span><br><span class="line">            Item aItem = a.GetComponent&lt;Item&gt;();</span><br><span class="line">            aItem.Info.Num = num; </span><br><span class="line"></span><br><span class="line">            transform.SetParent(Inventory.instance.dragCanvas.transform,<span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//跟随鼠标移动</span></span><br><span class="line">        transform.position = eventData.position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//放下物品 交换数据</span></span><br><span class="line">        <span class="keyword">if</span> (EventSystem.current.IsPointerOverGameObject())<span class="comment">//是否指向UI组件</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Inventory.instance.CheckInInventoryUI(eventData.position))</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 a = eventData.pointerEnter.transform.position;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//寻找最近的物品格</span></span><br><span class="line">                GameObject item = <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">double</span> minDistance=<span class="number">1000000000f</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Inventory.instance.transform.childCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 b = Inventory.instance.transform.GetChild(i).transform.position;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">double</span> dis = Vector2.Distance(a, b);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (dis &lt; minDistance)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minDistance = dis;</span><br><span class="line">                        item = Inventory.instance.transform.GetChild(i).gameObject;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//物品交换</span></span><br><span class="line">                    <span class="keyword">if</span> (Swap(item))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Item it1 = item.transform.GetChild(<span class="number">0</span>).GetComponent&lt;Item&gt;();</span><br><span class="line">                        Item it2 = transform.GetComponent&lt;Item&gt;();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//合并同类物品</span></span><br><span class="line">                        <span class="keyword">if</span> (it1.Info.Name == it2.Info.Name)</span><br><span class="line">                        &#123;</span><br><span class="line">                            it1.Info.Num += it2.Info.Num;</span><br><span class="line">                            Destroy(gameObject);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            item.transform.GetChild(<span class="number">0</span>).SetParent(originalParent,<span class="literal">true</span>);</span><br><span class="line">                            transform.SetParent(item.transform, <span class="literal">true</span>);</span><br><span class="line">                            SetRectTransform(gameObject);</span><br><span class="line">                            SetRectTransform(originalParent.GetChild(<span class="number">0</span>).gameObject);</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//空物品格</span></span><br><span class="line">                        transform.SetParent(item.transform, <span class="literal">true</span>);</span><br><span class="line">                        SetRectTransform(gameObject);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//不是物品格，返回原位</span></span><br><span class="line">                transform.SetParent(originalParent,<span class="literal">true</span>);</span><br><span class="line">                SetRectTransform(gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Swap</span>(<span class="params">GameObject tmp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.transform.childCount == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetRectTransform</span>(<span class="params">GameObject tmp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RectTransform rt = tmp.transform.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        rt.offsetMax = <span class="keyword">new</span> Vector2(<span class="number">-5f</span>, <span class="number">-5f</span>);</span><br><span class="line">        rt.offsetMin = <span class="keyword">new</span> Vector2(<span class="number">5f</span>, <span class="number">5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Average</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Average</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Average instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isLeft;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        instance = gameObject.GetComponent&lt;Average&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Mouse0))</span><br><span class="line">        &#123;</span><br><span class="line">            isLeft = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Mouse1))</span><br><span class="line">        &#123;</span><br><span class="line">            isLeft = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://pan.baidu.com/s/1ikd8VTICWr6vLqa-IMD7Sw">Unity包资源</a> 提取码: a53r </p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Json</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity基础组件教程-SpriteRenderer</title>
    <url>/2024/05/14/UnityTutorialSpriteRenderer/</url>
    <content><![CDATA[<h1 id="Unity基础组件教程-SpriteRenderer"><a href="#Unity基础组件教程-SpriteRenderer" class="headerlink" title="Unity基础组件教程-SpriteRenderer"></a>Unity基础组件教程-SpriteRenderer</h1><h2 id="一、SpriteRenderer"><a href="#一、SpriteRenderer" class="headerlink" title="一、SpriteRenderer"></a>一、SpriteRenderer</h2><img src="https://img.ackow129.top/i/2024/05/14/230936.png" width="50%" height="50%">

<p>1、<code>Sprite</code>:要渲染的精灵。</p>
<p>2、<code>Color</code>:为精灵图形渲染颜色。</p>
<p>3、<code>FilpX</code>和<code>FlipY</code>:在相应轴上反转精灵。</p>
<table>
<thead>
<tr>
<th><img src="https://img.ackow129.top/i/2024/05/15/175347.png"></th>
<th><img src="https://img.ackow129.top/i/2024/05/15/175347_1.png" ></th>
</tr>
</thead>
</table>
<p>4、<code>Draw Mode</code>: 精灵渲染器的当前绘制模式。</p>
<p>5、<code>Mask Interaction</code>:指定精灵如何与遮罩交互。</p>
<p>6、<code>Sprite Sort Point</code>:指定精灵排序时使用的参考点。</p>
<p>7、<code>Material</code>:指定精灵的渲染材质。材质控制了精灵的外观，包括颜色、透明度、光照和其他视觉效果。</p>
<p>8、<code>Additional Settings</code>:</p>
<p>​	<code>Sorting Layer</code>:指定精灵所在的排序层。排序层决定了精灵的渲染顺序，相同排序层内的精灵可以通过Order in Layer来进一步排序。</p>
<p>​	<code>Order in Layer</code>:在同一排序层内定义精灵的渲染顺序。数值越大，精灵越靠前渲染。</p>
<h2 id="二、Draw-Mode"><a href="#二、Draw-Mode" class="headerlink" title="二、Draw Mode"></a>二、Draw Mode</h2><p>1、<code>Simple</code>:默认选项；精灵图像按照其原始尺寸进行绘制；不进行任何缩放或切割操作；适用于需要以原始尺寸显示的精灵。</p>
<p>2、<code>Sliced</code>:主要用于九宫格切片；适合需要拉伸但保持边缘不变形的图像，例如UI按钮或面板；精灵图像被分割成9个部分：四个角、四条边和中间部分；通过调整中间部分的尺寸，边缘部分保持不变，从而实现无失真的缩放效果；需要精灵图像设置九宫格边界（Sprite Editor中的Border属性）。</p>
<p>3、<code>Tiled</code>:图像在其边界内进行重复平铺；适用于需要重复模式的背景或图案。；精灵图像不会被拉伸，而是重复绘制以填充给定区域；平铺图像的大小可以通过调整组件的大小来控制。</p>
<p>每个选项适用于不同的使用场景：</p>
<ul>
<li><strong>Simple</strong>适用于固定尺寸的精灵，不需要任何特殊的处理。</li>
<li><strong>Sliced</strong>适用于UI元素和其他需要动态调整大小但保持边缘完整性的对象。</li>
<li><strong>Tiled</strong>适用于背景和需要重复模式的图案。</li>
</ul>
<p>通过选择合适的<code>Draw Mode</code>，可以更好地控制精灵的渲染效果，满足不同的游戏需求。</p>
<h2 id="三、Mask-Interaction"><a href="#三、Mask-Interaction" class="headerlink" title="三、Mask Interaction"></a>三、Mask Interaction</h2><ol>
<li><strong>None</strong>（无）：<ul>
<li>精灵不受任何遮罩影响。</li>
<li>无论遮罩如何设置，精灵始终完全可见。</li>
</ul>
</li>
<li><strong>Visible Inside Mask</strong>（遮罩内可见）：<ul>
<li>只有位于遮罩内的部分精灵可见。</li>
<li>位于遮罩外的部分将被剪裁，不会显示。</li>
</ul>
</li>
<li><strong>Visible Outside Mask</strong>（遮罩外可见）：<ul>
<li>只有位于遮罩外的部分精灵可见。</li>
<li>位于遮罩内的部分将被剪裁，不会显示。</li>
</ul>
</li>
</ol>
<h2 id="四、Sprite-Sort-Point"><a href="#四、Sprite-Sort-Point" class="headerlink" title="四、Sprite Sort Point"></a>四、Sprite Sort Point</h2><ol>
<li><strong>Center</strong>（中心点）<ul>
<li>使用精灵的中心点进行排序。</li>
<li>中心点是精灵矩形边界的几何中心。</li>
</ul>
</li>
<li><strong>Pivot</strong>（枢轴点）<ul>
<li>使用精灵的枢轴点进行排序。</li>
<li>枢轴点是你在精灵的<code>Sprite Editor</code>中设置的点，可以是精灵矩形边界的任何位置，通常是左下角、右上角、中心或自定义位置。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
